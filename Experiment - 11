#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#include <string.h>
#define MAX 100
double values[MAX];
char ops[MAX];
int valTop = -1, opTop = -1;
void pushVal(double val) { values[++valTop] = val; }
double popVal() { return values[valTop--]; }
void pushOp(char op) { ops[++opTop] = op; }
char popOp() { return ops[opTop--]; }
int precedence(char op) {
    switch(op) {
        case '^': return 3;
        case '*': case '/': return 2;
        case '+': case '-': return 1;
    }
    return 0;
}
double applyOp(double a, double b, char op) {
    switch(op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        case '^': return pow(a, b);
    }
    return 0;
}
double evaluate(char *exp) {
    int i;
    for(i=0; exp[i]; i++) {
        if (exp[i] == ' ') continue;
        if (isdigit(exp[i])) {
            double val = 0;
            while (i < strlen(exp) && isdigit(exp[i])) {
                val = val*10 + (exp[i]-'0');
                i++;
            }
            i--; 
            pushVal(val);
        }
        else if (exp[i] == '(') {
            pushOp(exp[i]);
        }
        else if (exp[i] == ')') {
            while (opTop != -1 && ops[opTop] != '(') {
                double val2 = popVal();
                double val1 = popVal();
                char op = popOp();
                pushVal(applyOp(val1, val2, op));
            }
            popOp(); 
        }
        else {
            while (opTop != -1 && precedence(ops[opTop]) >= precedence(exp[i])) {
                double val2 = popVal();
                double val1 = popVal();
                char op = popOp();
                pushVal(applyOp(val1, val2, op));
            }
            pushOp(exp[i]);
        }
    }
    while (opTop != -1) {
        double val2 = popVal();
        double val1 = popVal();
        char op = popOp();
        pushVal(applyOp(val1, val2, op));
    }
    return popVal();
}
int main() {
    char exp[MAX];
    printf("Enter an expression: ");
    scanf("%s", exp);
    double result = evaluate(exp);
    printf("Result = %.2f\n", result);
    return 0;
}



OUTPUT :-
Enter an expression: 3+5*2^2


Result = 23.00
