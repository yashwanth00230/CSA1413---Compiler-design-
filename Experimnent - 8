#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX 100
struct Symbol {
    char identifier[30];
    char type[10];
    int address;
} table[MAX];
int count = 0; 
void insert() {
    if (count == MAX) {
        printf("Symbol Table is full!\n");
        return;
    }
    char id[30], type[10];
    int addr;
    printf("Enter identifier: ");
    scanf("%s", id);
    for (int i = 0; i < count; i++) {
        if (strcmp(table[i].identifier, id) == 0) {
            printf("Error: Identifier already exists!\n");
            return;
        }
    }
    printf("Enter type: ");
    scanf("%s", type);
    printf("Enter address: ");
    scanf("%d", &addr);
    strcpy(table[count].identifier, id);
    strcpy(table[count].type, type);
    table[count].address = addr;
    count++;
    printf("Inserted successfully!\n");
}
void search() {
    char id[30];
    printf("Enter identifier to search: ");
    scanf("%s", id);
    for (int i = 0; i < count; i++) {
        if (strcmp(table[i].identifier, id) == 0) {
            printf("Found: %s, Type: %s, Address: %d\n",
                   table[i].identifier, table[i].type, table[i].address);
            return;
        }
    }
    printf("Identifier not found!\n");
}
void modify() {
    char id[30];
    printf("Enter identifier to modify: ");
    scanf("%s", id);
    for (int i = 0; i < count; i++) {
        if (strcmp(table[i].identifier, id) == 0) {
            printf("Enter new type: ");
            scanf("%s", table[i].type);
            printf("Enter new address: ");
            scanf("%d", &table[i].address);
            printf("Modified successfully!\n");
            return;
        }
    }
    printf("Identifier not found!\n");
}
void deleteEntry() {
    char id[30];
    printf("Enter identifier to delete: ");
    scanf("%s", id);
    for (int i = 0; i < count; i++) {
        if (strcmp(table[i].identifier, id) == 0) {
            for (int j = i; j < count - 1; j++) {
                table[j] = table[j + 1];
            }
            count--;
            printf("Deleted successfully!\n");
            return;
        }
    }
    printf("Identifier not found!\n");
}
void display() {
    if (count == 0) {
        printf("Symbol Table is empty!\n");
        return;
    }
    printf("\nSymbol Table:\n");
    printf("Identifier\tType\tAddress\n");
    printf("--------------------------------\n");
    for (int i = 0; i < count; i++) {
        printf("%s\t\t%s\t%d\n",
               table[i].identifier, table[i].type, table[i].address);
    }
}
int main() {
    int choice;
    while (1) {
        printf("\n--- Symbol Table Menu ---\n");
        printf("1. Insert\n2. Search\n3. Modify\n4. Delete\n5. Display\n6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1: insert(); break;
            case 2: search(); break;
            case 3: modify(); break;
            case 4: deleteEntry(); break;
            case 5: display(); break;
            case 6: exit(0);
            default: printf("Invalid choice!\n");
        }
    }
    return 0;
}



OUTPUT:-

--- Symbol Table Menu ---
1. Insert
2. Search
3. Modify
4. Delete
5. Display
6. Exit
Enter your choice: 1
Enter identifier: x
Enter type: int
Enter address: 100
Inserted successfully!

--- Symbol Table Menu ---
1. Insert
2. Search
3. Modify
4. Delete
5. Display
6. Exit
Enter your choice: 1
Enter identifier: y
Enter type: float
Enter address: 104
Inserted successfully!

--- Symbol Table Menu ---
1. Insert
2. Search
3. Modify
4. Delete
5. Display
6. Exit
Enter your choice: 5

Symbol Table:
Identifier	 Type	    Address
--------------------------------
x		         int	     100
y		         float	   104
